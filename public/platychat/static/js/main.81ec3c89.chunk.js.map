{"version":3,"sources":["firebase/firebase.utils.js","pages/login/login.styles.js","pages/login/login.components.jsx","pages/convos/components/convo-list-item/convo-list-item.components.jsx","pages/convos/components/convos-card/convos-card.styles.js","pages/convos/components/convos-card/convos-card.components.jsx","pages/convos/components/search-card/search-card.styles.js","pages/convos/components/search-card/search-card.components.jsx","redux/base/base.reducer.js","pages/convos/components/settings-card/settings-card.styles.js","pages/convos/components/settings-card/settings-card.components.jsx","pages/convos/convos.styles.js","pages/convos/convos.components.jsx","pages/messages/messages.styles.js","redux/messages/messages.reducer.js","pages/messages/messages.components.jsx","App.routes.jsx","redux/socket/socket.reducer.js","redux/sagas.js","redux/root-reducer.js","redux/store.js","components/socket.io-provider/socket.io-provider.components.jsx","theme/theme.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","makeStyles","theme","root","padding","formElement","width","button","backgroundColor","palette","primary","main","color","gridSizes","xs","sm","md","lg","xl","withRouter","history","classes","useStyles","React","useState","username","password","loginForm","setLoginForm","handleChange","e","target","value","name","className","onSubmit","preventDefault","signInWithEmailAndPassword","push","Grid","container","spacing","direction","alignContent","item","Typography","variant","style","textAlign","TextField","size","placeholder","onChange","type","Button","connect","state","socket","user","base","convo","ListItem","onClick","emit","token","uid","convoid","ListItemIcon","Badge","badgeContent","unreadCount","ListItemText","convoname","secondary","participants","convoList","maxHeight","overflowY","input","height","convos","messages","convoName","messagesFilter","inputFields","setInputFields","Card","InputProps","fullWidth","List","dense","Object","keys","sort","convo1","convo2","map","index","messageResults","messageSearchResults","searchText","setSearchText","result","alias","timestamp","rawtext","SET_DARK_MODE_ENABLED","SET_USER","FORCED_RERENDER","setUser","payload","INITIAL_STATE","darkModeEnabled","baseReducer","dispatch","setDarkModeEnabled","isDarkModeEnabled","setAlias","setColor","alignItems","Switch","checked","_","fullWidthGridSizes","useEffect","signOut","localStorage","clear","inputGroup","SET_CONVOS","SET_MESSAGE_SEARCH_RESULTS","SET_CURRENT_CONVOID","setConvos","currentConvoid","messagesReducer","textFieldSizes","buttonSizes","uploader","setCurrentConvoid","match","console","log","url","split","currentConvo","currentMessages","message","setMessage","list","setList","scrollTo","top","ref","test","Box","src","process","links","forEach","link","replace","text","d","Link","href","ListItemAvatar","fileList","files","blob","i","fileIdentifier","ret","Math","round","random","toString","_generateRandomString","meta","fileReader","FileReader","onload","submitFiles","readAsDataURL","length","autoComplete","justify","Container","exact","path","render","to","io","SocketIOFileUpload","require","SET_SOCKET","CONVO_LIST_RESPONSE","socketReducer","convoListResponseSaga","allSagas","takeEvery","put","all","call","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","applyMiddleware","run","persistor","persistStore","warn","convoListResponse","forceRerender","setMessageSearchResults","setSocket","on","normalizedConvos","JSON","parse","reduce","acc","getState","todayString","window","addEventListener","off","items","clipboardData","kind","getAsFile","prefersDarkMode","useMediaQuery","onAuthStateChanged","a","getIdToken","superTheme","useMemo","createMuiTheme","basename","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81ec3c89.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyCSqIX7JgOxs-W0KSP11rWgg_Smyq3dRr0',\r\n  authDomain: 'platychat.firebaseapp.com',\r\n  databaseURL: 'https://platychat.firebaseio.com',\r\n  projectId: 'platychat',\r\n  storageBucket: 'platychat.appspot.com',\r\n  messagingSenderId: '540254856882',\r\n  appId: '1:540254856882:web:5eb0db85a5670ceb77cbab',\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const auth = firebase.auth()\r\n\r\nexport default firebase\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    padding: '20px',\r\n  },\r\n  formElement: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: '#fff',\r\n    '&:hover': {\r\n      color: '#000',\r\n    },\r\n  },\r\n}))\r\n","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { auth } from '../../firebase/firebase.utils'\r\n\r\nimport { Grid, Button, TextField, Typography } from '@material-ui/core'\r\n\r\nimport useStyles from './login.styles'\r\n\r\nconst gridSizes = {\r\n  xs: 12,\r\n  sm: 12,\r\n  md: 6,\r\n  lg: 6,\r\n  xl: 6,\r\n}\r\n\r\nconst LoginPage = ({ history }) => {\r\n  const classes = useStyles()\r\n\r\n  const [loginForm, setLoginForm] = React.useState({\r\n    username: '',\r\n    password: '',\r\n  })\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    auth.signInWithEmailAndPassword(loginForm.username, loginForm.password)\r\n    history.push('/convos')\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    const { value, name } = e.target\r\n\r\n    setLoginForm({\r\n      ...loginForm,\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <form className={classes.root} onSubmit={handleSubmit}>\r\n      <Grid container spacing={2} direction='column' alignContent='center'>\r\n        <Grid item {...gridSizes}>\r\n          <Typography variant='h5' style={{ textAlign: 'center' }}>\r\n            Platychat <span>&#x1f986;</span>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item {...gridSizes}>\r\n          <TextField\r\n            name='username'\r\n            variant='outlined'\r\n            size='small'\r\n            placeholder='email'\r\n            value={loginForm.username}\r\n            onChange={handleChange}\r\n            className={classes.formElement}\r\n          />\r\n        </Grid>\r\n        <Grid item {...gridSizes}>\r\n          <TextField\r\n            name='password'\r\n            type='password'\r\n            variant='outlined'\r\n            placeholder='password'\r\n            size='small'\r\n            value={loginForm.password}\r\n            onChange={handleChange}\r\n            className={classes.formElement}\r\n          />\r\n        </Grid>\r\n        <Grid item {...gridSizes}>\r\n          <Button\r\n            className={`${classes.button} ${classes.formElement}`}\r\n            type='submit'\r\n            variant='contained'>\r\n            Login\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default withRouter(LoginPage)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { ListItem, ListItemText, ListItemIcon, Badge } from '@material-ui/core'\r\n\r\n//Icons\r\nimport MessageIcon from '@material-ui/icons/Message'\r\n\r\nconst ConvoListItem = ({ user, socket, convo, history }) => {\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={() => {\r\n        socket.emit('convo-join-request', user.token, user.uid, convo.convoid)\r\n        history.push(`/messages/${convo.convoid}`)\r\n      }}>\r\n      <ListItemIcon>\r\n        <Badge badgeContent={convo.unreadCount} color='primary'>\r\n          <MessageIcon />\r\n        </Badge>\r\n      </ListItemIcon>\r\n      <ListItemText primary={convo.convoname} secondary={convo.participants} />\r\n    </ListItem>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  socket: state.socket.socket,\r\n  user: state.base.user,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ConvoListItem)\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles({\r\n  root: { padding: '20px' },\r\n  convoList: { maxHeight: '240px', overflowY: 'auto' },\r\n  input: { height: 38 },\r\n})\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport {\r\n  Grid,\r\n  Card,\r\n  Typography,\r\n  List,\r\n  TextField,\r\n  Button,\r\n} from '@material-ui/core'\r\n\r\nimport ConvoListItem from '../convo-list-item/convo-list-item.components'\r\n\r\n//Icons\r\n\r\nimport useStyles from './convos-card.styles'\r\n\r\nconst gridSizes = {\r\n  xs: 12,\r\n  sm: 12,\r\n  md: 12,\r\n  lg: 12,\r\n  xl: 12,\r\n}\r\n\r\nconst ConvosCard = ({ history, convos, user, socket }) => {\r\n  const classes = useStyles()\r\n\r\n  const [inputFields, setInputFields] = React.useState({\r\n    convoName: '',\r\n    messagesFilter: '',\r\n  })\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n    setInputFields({\r\n      ...inputFields,\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <Grid container spacing={1}>\r\n        <Grid item {...gridSizes}>\r\n          <Typography variant='h6'>Messages</Typography>\r\n        </Grid>\r\n\r\n        <Grid item {...gridSizes}>\r\n          <Grid container>\r\n            <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\r\n              <TextField\r\n                InputProps={{ className: classes.input }}\r\n                name='convoName'\r\n                fullWidth\r\n                variant='outlined'\r\n                placeholder='Convo Name...'\r\n                onChange={handleChange}\r\n                value={inputFields.convoName}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\r\n              <Button\r\n                fullWidth\r\n                onClick={() => {\r\n                  socket.emit(\r\n                    'convo-create-request',\r\n                    user.token,\r\n                    user.uid,\r\n                    inputFields.convoName\r\n                  )\r\n                  setInputFields({ ...inputFields, convoName: '' })\r\n                }}>\r\n                Add\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item {...gridSizes}>\r\n          <Grid container>\r\n            <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\r\n              <TextField\r\n                InputProps={{ className: classes.input }}\r\n                name='messagesFilter'\r\n                fullWidth\r\n                variant='outlined'\r\n                placeholder='Search...'\r\n                value={inputFields.messagesFilter}\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2} sm={2} md={2} lg={2} xl={2}>\r\n              <Button className={classes.input} fullWidth>\r\n                Filter\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid className={classes.convoList} item {...gridSizes}>\r\n          <List dense>\r\n            {Object.keys(convos)\r\n              .sort((convo1, convo2) => {\r\n                if (convos[convo1].unreadCount > convos[convo2].unreadCount)\r\n                  return -1\r\n                if (convos[convo1].unreadCount < convos[convo2].unreadCount)\r\n                  return 1\r\n                return 0\r\n              })\r\n              .map((convo, index) => (\r\n                <ConvoListItem\r\n                  key={index}\r\n                  convo={convos[convo]}\r\n                  history={history}\r\n                />\r\n              ))}\r\n          </List>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  convos: state.messages.convos,\r\n  user: state.base.user,\r\n  socket: state.socket.socket,\r\n})\r\n\r\nexport default connect(mapStateToProps)(withRouter(ConvosCard))\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles({\r\n  root: { padding: '20px' },\r\n  messageResults: { maxHeight: '240px', overflowY: 'auto' },\r\n  input: { height: 38 },\r\n})\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  Grid,\r\n  Card,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  TextField,\r\n  Button,\r\n} from '@material-ui/core'\r\n\r\nimport useStyles from './search-card.styles'\r\n\r\nconst gridSizes = {\r\n  xs: 12,\r\n  sm: 12,\r\n  md: 12,\r\n  lg: 12,\r\n  xl: 12,\r\n}\r\n\r\nconst SearchCard = ({ socket, user, messageSearchResults }) => {\r\n  const classes = useStyles()\r\n\r\n  const [searchText, setSearchText] = React.useState('')\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <Grid container spacing={1}>\r\n        <Grid item {...gridSizes}>\r\n          <TextField\r\n            name='searchMessages'\r\n            value={searchText}\r\n            onChange={(e) => setSearchText(e.target.value)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item {...gridSizes}>\r\n          <Button\r\n            fullWidth\r\n            variant='contained'\r\n            onClick={() => {\r\n              if (socket && user)\r\n                socket.emit(\r\n                  'convo-search-request',\r\n                  user.token,\r\n                  user.uid,\r\n                  searchText\r\n                )\r\n              setSearchText('')\r\n            }}>\r\n            Search\r\n          </Button>\r\n        </Grid>\r\n        <Grid className={classes.messageResults} item {...gridSizes}>\r\n          <List dense>\r\n            {messageSearchResults\r\n              ? messageSearchResults.map((result, index) => (\r\n                  <ListItem key={index}>\r\n                    <ListItemText>\r\n                      {`${result.alias} (${result.timestamp}) - ${result.rawtext}`}\r\n                    </ListItemText>\r\n                  </ListItem>\r\n                ))\r\n              : null}\r\n          </List>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  socket: state.socket.socket,\r\n  user: state.base.user,\r\n  messageSearchResults: state.messages.messageSearchResults,\r\n})\r\n\r\nexport default connect(mapStateToProps)(SearchCard)\r\n","const SET_DARK_MODE_ENABLED = '[BASE] SET_DARK_MODE_ENABLED'\r\nconst SET_USER = '[BASE] SET_USER'\r\nconst FORCED_RERENDER =\r\n  'lollllllll stay mad idiots, im forcing a rerender using redux, stay mad'\r\n\r\nexport const setDarkModeEnabled = (isDarkModeEnabled) => ({\r\n  type: SET_DARK_MODE_ENABLED,\r\n  payload: isDarkModeEnabled,\r\n})\r\n\r\nexport const setUser = (user) => ({\r\n  type: SET_USER,\r\n  payload: user,\r\n})\r\n\r\nexport const forceRerender = () => ({\r\n  type: FORCED_RERENDER,\r\n  payload: Math.random(),\r\n})\r\n\r\nconst INITIAL_STATE = {\r\n  darkModeEnabled: false,\r\n  user: null,\r\n}\r\n\r\nconst baseReducer = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case FORCED_RERENDER: {\r\n      return state\r\n    }\r\n    case SET_DARK_MODE_ENABLED: {\r\n      return {\r\n        ...state,\r\n        darkModeEnabled: payload,\r\n      }\r\n    }\r\n    case SET_USER: {\r\n      return {\r\n        ...state,\r\n        user: payload,\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default baseReducer\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles({\r\n  root: { padding: '20px' },\r\n  input: { height: 38 },\r\n})\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  Grid,\r\n  Card,\r\n  Switch,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n} from '@material-ui/core'\r\n\r\nimport { setDarkModeEnabled } from '../../../../redux/base/base.reducer'\r\n\r\nimport useStyles from './settings-card.styles'\r\n\r\nconst gridSizes = {\r\n  xs: 12,\r\n  sm: 12,\r\n  md: 12,\r\n  lg: 12,\r\n  xl: 12,\r\n}\r\n\r\nconst SettingsCard = ({\r\n  darkModeEnabled,\r\n  setDarkModeEnabled,\r\n  socket,\r\n  user,\r\n}) => {\r\n  const classes = useStyles()\r\n\r\n  const [alias, setAlias] = React.useState('')\r\n  const [color, setColor] = React.useState('')\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <Grid container>\r\n        <Grid item {...gridSizes}>\r\n          <Typography variant='h6'>Settings</Typography>\r\n        </Grid>\r\n\r\n        <Grid item {...gridSizes}>\r\n          <Grid container alignItems='center'>\r\n            <Grid item xs={6} sm={6} md={6} lg={6} xl={6}>\r\n              <Typography>Dark Mode</Typography>\r\n            </Grid>\r\n            <Grid item xs={6} sm={6} md={6} lg={6} xl={6}>\r\n              <Switch\r\n                checked={darkModeEnabled}\r\n                onChange={(_, value) => {\r\n                  setDarkModeEnabled(value)\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item {...gridSizes}>\r\n          <Grid container alignItems='center'>\r\n            <Grid item xs={3} sm={3} md={3} lg={3} xl={6}>\r\n              <Typography>Alias</Typography>\r\n            </Grid>\r\n            <Grid item xs={6} sm={6} md={6} lg={6} xl={6}>\r\n              <TextField\r\n                name='alias'\r\n                value={alias}\r\n                onChange={(e) => setAlias(e.target.value)}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3} sm={3} md={3} lg={3} xl={3}>\r\n              <Button\r\n                onClick={() => {\r\n                  if (user && user.token && socket)\r\n                    socket.emit(\r\n                      'user-alias-request',\r\n                      user.token,\r\n                      user.uid,\r\n                      alias\r\n                    )\r\n                  setAlias('')\r\n                }}\r\n                fullWidth>\r\n                Set\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item {...gridSizes}>\r\n          <Grid container alignItems='center'>\r\n            <Grid item xs={3} sm={3} md={3} lg={3} xl={6}>\r\n              <Typography>Color</Typography>\r\n            </Grid>\r\n            <Grid item xs={6} sm={6} md={6} lg={6} xl={6}>\r\n              <TextField\r\n                name='color'\r\n                placeholder='#123abf'\r\n                value={color}\r\n                fullWidth\r\n                onChange={(e) => setColor(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3} sm={3} md={3} lg={3} xl={3}>\r\n              <Button\r\n                onClick={() => {\r\n                  if (user && user.token && socket)\r\n                    socket.emit(\r\n                      'user-color-request',\r\n                      user.token,\r\n                      user.uid,\r\n                      color\r\n                    )\r\n                  setColor('')\r\n                }}\r\n                fullWidth>\r\n                Set\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  darkModeEnabled: state.base.darkModeEnabled,\r\n  socket: state.socket.socket,\r\n  user: state.base.user,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDarkModeEnabled: (isDarkModeEnabled) =>\r\n    dispatch(setDarkModeEnabled(isDarkModeEnabled)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsCard)\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    padding: '20px',\r\n  },\r\n}))\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { auth } from '../../firebase/firebase.utils'\r\n\r\nimport { Grid, Button } from '@material-ui/core'\r\n\r\nimport ConvosCard from './components/convos-card/convos-card.components'\r\nimport SearchCard from './components/search-card/search-card.components'\r\nimport SettingsCard from './components/settings-card/settings-card.components'\r\n\r\nimport useStyles from './convos.styles'\r\n\r\nconst gridSizes = {\r\n  xs: 12,\r\n  sm: 12,\r\n  md: 4,\r\n  lg: 4,\r\n  xl: 4,\r\n}\r\n\r\nconst fullWidthGridSizes = {\r\n  xs: 12,\r\n  sm: 12,\r\n  md: 12,\r\n  lg: 12,\r\n  xl: 12,\r\n}\r\n\r\nconst ConvosPage = ({ history, socket, user }) => {\r\n  React.useEffect(() => {\r\n    if (socket && user) socket.emit('convo-list-request', user.token, user.uid)\r\n  }, [socket, user])\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Grid className={classes.root} container spacing={1}>\r\n      <Grid item {...fullWidthGridSizes}>\r\n        <Button\r\n          fullWidth\r\n          onClick={() => {\r\n            auth.signOut()\r\n            localStorage.clear()\r\n            history.push('/login')\r\n          }}>\r\n          Sign Out\r\n        </Button>\r\n      </Grid>\r\n      <Grid item {...gridSizes}>\r\n        <ConvosCard />\r\n      </Grid>\r\n      <Grid item {...gridSizes}>\r\n        <SearchCard />\r\n      </Grid>\r\n      <Grid item {...gridSizes}>\r\n        <SettingsCard />\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  socket: state.socket.socket,\r\n  user: state.base.user,\r\n  convos: state.messages.convos,\r\n})\r\n\r\nexport default connect(mapStateToProps)(withRouter(ConvosPage))\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\nexport default makeStyles((theme) => ({\r\n  root: {\r\n    padding: '20px',\r\n    height: '98vh',\r\n  },\r\n  messages: {\r\n    height: '80vh',\r\n    overflowY: 'auto',\r\n  },\r\n  inputGroup: {\r\n    height: '10vh',\r\n  },\r\n  input: {\r\n    height: 38,\r\n  },\r\n  button: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: '#fff',\r\n  },\r\n}))\r\n","export const SET_CONVOS = '[MESSAGES] SET_CONVOS'\r\nexport const SET_MESSAGE_SEARCH_RESULTS =\r\n  '[MESSAGES] SET_MESSAGE_SEARCH_RESULTS'\r\nexport const SET_CURRENT_CONVOID = '[MESSAGES] SET_CURRENT_CONVOID'\r\n\r\nexport const setConvos = (convos) => ({\r\n  type: SET_CONVOS,\r\n  payload: convos,\r\n})\r\n\r\nexport const setCurrentConvoid = (convoid) => ({\r\n  type: SET_CURRENT_CONVOID,\r\n  payload: convoid,\r\n})\r\n\r\nexport const setMessageSearchResults = (messages) => ({\r\n  type: SET_MESSAGE_SEARCH_RESULTS,\r\n  payload: messages,\r\n})\r\n\r\nconst INITIAL_STATE = {\r\n  convos: {},\r\n  currentConvoid: null,\r\n  messageSearchResults: [],\r\n}\r\n\r\nconst messagesReducer = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case SET_CONVOS: {\r\n      return {\r\n        ...state,\r\n        convos: payload,\r\n      }\r\n    }\r\n    case SET_CURRENT_CONVOID: {\r\n      return {\r\n        ...state,\r\n        currentConvoid: payload,\r\n      }\r\n    }\r\n    case SET_MESSAGE_SEARCH_RESULTS: {\r\n      return {\r\n        ...state,\r\n        messageSearchResults: payload,\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default messagesReducer\r\n","import React from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  Box,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Button,\r\n  TextField,\r\n  Link,\r\n} from '@material-ui/core'\r\n\r\nimport useStyles from './messages.styles'\r\nimport { setCurrentConvoid } from '../../redux/messages/messages.reducer'\r\n\r\nconst gridSizes = {\r\n  xs: 12,\r\n  sm: 12,\r\n  md: 12,\r\n  lg: 12,\r\n  xl: 12,\r\n}\r\n\r\nconst textFieldSizes = {\r\n  xs: 10,\r\n  sm: 10,\r\n  md: 10,\r\n  lg: 10,\r\n  xl: 10,\r\n}\r\n\r\nconst buttonSizes = {\r\n  xs: 2,\r\n  sm: 2,\r\n  md: 2,\r\n  lg: 2,\r\n  xl: 2,\r\n}\r\n\r\nconst MessagesPage = ({\r\n  match,\r\n  user,\r\n  socket,\r\n  uploader,\r\n  convos,\r\n  setCurrentConvoid,\r\n  currentConvoid,\r\n}) => {\r\n  console.log('render!!!!')\r\n  const projectURL =\r\n    process.env.NODE_ENV === 'production'\r\n      ? process.env.REACT_APP_PROD_URL + process.env.REACT_APP_ROOT_DIRECTORY\r\n      : process.env.REACT_APP_DEV_URL + process.env.REACT_APP_ROOT_DIRECTORY\r\n  const convoid = match.url.split('/')[2]\r\n  const currentConvo = convos[convoid]\r\n  const currentMessages = currentConvo ? currentConvo.messages : []\r\n\r\n  React.useEffect(() => {\r\n    setCurrentConvoid(convoid)\r\n  }, [currentConvoid])\r\n\r\n  React.useEffect(() => {\r\n    socket.emit('convo-join-request', user.token, user.uid, currentConvoid)\r\n  }, [socket, user])\r\n\r\n  const classes = useStyles()\r\n\r\n  const [message, setMessage] = React.useState('')\r\n  const [list, setList] = React.useState(null)\r\n\r\n  React.useEffect(() => {\r\n    if (list && list.scrollTo)\r\n      list.scrollTo({\r\n        top: 1000000,\r\n      })\r\n  }, [list, convos])\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target\r\n    setMessage(value)\r\n  }\r\n\r\n  const handleFileChange = (e) => {\r\n    var fileList = e.target.files\r\n\r\n    for (var i = 0; i < fileList.length; i++) {\r\n      var blob = fileList[i]\r\n\r\n      function _generateRandomString() {\r\n        let ret = ''\r\n        for (let i = 0; i < 9; i++) {\r\n          ret += Math.round(Math.random() * 9).toString()\r\n        }\r\n        return ret\r\n      }\r\n      const fileIdentifier = _generateRandomString()\r\n\r\n      blob.meta = fileIdentifier\r\n      var fileReader = new FileReader()\r\n      fileReader.onload = function (e) {\r\n        socket.emit(\r\n          'convo-message-request',\r\n          user.token,\r\n          user.uid,\r\n          currentConvoid,\r\n          '/image ' + fileIdentifier\r\n        )\r\n        uploader.submitFiles([blob])\r\n      }\r\n      fileReader.readAsDataURL(blob)\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (socket && user) {\r\n      socket.emit(\r\n        'convo-message-request',\r\n        user.token,\r\n        user.uid,\r\n        convoid,\r\n        message\r\n      )\r\n      setMessage('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid className={classes.root} container>\r\n      <Grid\r\n        className={classes.messages}\r\n        item\r\n        {...gridSizes}\r\n        ref={(e) => setList(e)}>\r\n        <List dense>\r\n          {currentMessages\r\n            ? currentMessages.map((message, index) => {\r\n                let rawtext = message.rawtext\r\n\r\n                //replace with image tag if image\r\n                if (/images\\/platychat.+/.test(rawtext))\r\n                  rawtext = (\r\n                    <Box>\r\n                      <br></br>\r\n                      <img src={`${projectURL}/${rawtext}`} />\r\n                    </Box>\r\n                  )\r\n\r\n                //replace with Link if contains links\r\n                let hasHttpLink = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/.test(\r\n                  rawtext\r\n                )\r\n\r\n                if (hasHttpLink) {\r\n                  let links = rawtext.match(\r\n                    /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g\r\n                  )\r\n\r\n                  links.forEach((link) => {\r\n                    rawtext = rawtext.replace(link, '~')\r\n                  })\r\n\r\n                  let text = rawtext.split('~')\r\n\r\n                  rawtext = (\r\n                    <span>\r\n                      {text.map((d, index) => (\r\n                        <span key={index}>\r\n                          {d}\r\n                          {links[index] ? (\r\n                            <Link href={links[index]} target='_blank'>\r\n                              {links[index]}\r\n                            </Link>\r\n                          ) : null}{' '}\r\n                        </span>\r\n                      ))}\r\n                    </span>\r\n                  )\r\n                }\r\n\r\n                return (\r\n                  <ListItem key={index}>\r\n                    <ListItemAvatar>\r\n                      <span>&#x1f997;</span>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box>\r\n                          <span style={{ color: message.color }}>\r\n                            {message.alias}\r\n                          </span>\r\n                          <span>{` ${message.timestamp} - `}</span>\r\n                          <span>{rawtext}</span>\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                )\r\n              })\r\n            : null}\r\n        </List>\r\n      </Grid>\r\n\r\n      <Grid item {...gridSizes}>\r\n        <input name='fileUpload' type='file' onChange={handleFileChange} />\r\n      </Grid>\r\n\r\n      <Grid className={classes.inputGroup} item {...gridSizes}>\r\n        <form autoComplete='off' onSubmit={handleSubmit}>\r\n          <Grid container spacing={1} alignItems='center' justify='center'>\r\n            <Grid item {...textFieldSizes}>\r\n              <TextField\r\n                InputProps={{ className: classes.input }}\r\n                name='message'\r\n                value={message}\r\n                variant='outlined'\r\n                autoComplete='off'\r\n                fullWidth\r\n                onChange={handleChange}\r\n              />\r\n            </Grid>\r\n            <Grid item {...buttonSizes}>\r\n              <Button\r\n                className={`${classes.input} ${classes.button}`}\r\n                fullWidth\r\n                type='submit'\r\n                variant='outlined'>\r\n                Send\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.base.user,\r\n  socket: state.socket.socket,\r\n  uploader: state.socket.uploader,\r\n  convos: state.messages.convos,\r\n  currentConvoid: state.messages.currentConvoid,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setCurrentConvoid: (convoid) => dispatch(setCurrentConvoid(convoid)),\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(MessagesPage))\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\n\r\nimport { Container } from '@material-ui/core'\r\n\r\nimport LoginPage from './pages/login/login.components'\r\nimport ConvosPage from './pages/convos/convos.components'\r\nimport MessagesPage from './pages/messages/messages.components'\r\n\r\nconst AppRoutes = ({ user }) => {\r\n  return (\r\n    <Container className='App'>\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path='/'\r\n          render={() =>\r\n            user ? <Redirect to='/convos' /> : <Redirect to='/login' />\r\n          }\r\n        />\r\n        <Route\r\n          exact\r\n          path='/login'\r\n          render={() => (user ? <Redirect to='/convos' /> : <LoginPage />)}\r\n        />\r\n        <Route\r\n          exact\r\n          path='/convos'\r\n          render={() => (user ? <ConvosPage /> : <Redirect to='/login' />)}\r\n        />\r\n        <Route\r\n          exact\r\n          path='/messages/:convoid'\r\n          render={() => (user ? <MessagesPage /> : <Redirect to='/login' />)}\r\n        />\r\n      </Switch>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.base.user,\r\n})\r\n\r\nexport default connect(mapStateToProps)(AppRoutes)\r\n","import { io } from 'socket.io-client'\r\n\r\nconst socket = io(\r\n  process.env.NODE_ENV === 'production'\r\n    ? process.env.REACT_APP_PROD_URL\r\n    : process.env.REACT_APP_DEV_URL\r\n)\r\nconst SocketIOFileUpload = require('socketio-file-upload')\r\n\r\nexport const SET_SOCKET = '[SOCKET] SET_SOCKET'\r\nexport const CONVO_LIST_RESPONSE = '[SOCKET] CONVO_LIST_RESPONSE'\r\n\r\nexport const setSocket = (socket) => ({\r\n  type: SET_SOCKET,\r\n  payload: socket,\r\n})\r\n\r\nexport const convoListResponse = (convos) => ({\r\n  type: CONVO_LIST_RESPONSE,\r\n  payload: convos,\r\n})\r\n\r\nconst INITIAL_STATE = {\r\n  socket: socket,\r\n  uploader: new SocketIOFileUpload(socket),\r\n}\r\n\r\nconst socketReducer = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case SET_SOCKET: {\r\n      return {\r\n        ...state,\r\n        socket: payload,\r\n        uploader: new SocketIOFileUpload(payload),\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default socketReducer\r\n","import { all, call, put, takeEvery } from 'redux-saga/effects'\r\n\r\nimport { CONVO_LIST_RESPONSE } from './socket/socket.reducer'\r\n\r\nimport { setConvos } from './messages/messages.reducer'\r\n\r\nfunction* convoListResponseSaga() {\r\n  yield takeEvery(CONVO_LIST_RESPONSE, function* ({ payload }) {\r\n    yield put(setConvos(payload))\r\n  })\r\n}\r\n\r\nexport default function* allSagas() {\r\n  yield all([call(convoListResponseSaga)])\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport baseReducer from './base/base.reducer'\r\nimport messagesReducer from './messages/messages.reducer'\r\nimport socketReducer from './socket/socket.reducer'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: ['base', 'messages'],\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  base: baseReducer,\r\n  messages: messagesReducer,\r\n  socket: socketReducer,\r\n})\r\n\r\nexport default persistReducer(persistConfig, rootReducer)\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { persistStore } from 'redux-persist'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport allSagas from './sagas'\r\n\r\nimport rootReducer from './root-reducer.js'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst middlewares = [sagaMiddleware]\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\r\n\r\nsagaMiddleware.run(allSagas)\r\n\r\nexport const persistor = persistStore(store)\r\n\r\nexport default { store, persistor }\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { store } from '../../redux/store'\r\nimport { io } from 'socket.io-client'\r\n\r\nimport { convoListResponse, setSocket } from '../../redux/socket/socket.reducer'\r\nimport {\r\n  setConvos,\r\n  setMessageSearchResults,\r\n} from '../../redux/messages/messages.reducer'\r\nimport { setUser, forceRerender } from '../../redux/base/base.reducer'\r\n\r\nconsole.warn = () => {}\r\n\r\nconst SocketIOProvider = ({\r\n  user,\r\n  socket,\r\n  convoListResponse,\r\n  setConvos,\r\n  forceRerender,\r\n  setSocket,\r\n  setMessageSearchResults,\r\n}) => {\r\n  React.useEffect(() => {\r\n    if (!socket) return\r\n\r\n    socket.on('login-response', (color) => {\r\n      if (!user) return\r\n      setUser({\r\n        ...user,\r\n        color,\r\n      })\r\n    })\r\n\r\n    socket.on('convo-list-response', (convos) => {\r\n      const normalizedConvos = JSON.parse(convos).reduce((acc, d) => {\r\n        acc[d.convoid] = d\r\n        return acc\r\n      }, {})\r\n      convoListResponse(normalizedConvos)\r\n    })\r\n\r\n    socket.on('convo-create-response', (convoid, convoname) => {\r\n      const convos = store.getState().messages.convos\r\n      setConvos({\r\n        ...convos,\r\n        [convoid]: { convoid, convoname },\r\n      })\r\n    })\r\n\r\n    socket.on('convo-join-response', (convoid, messages) => {\r\n      setConvos({\r\n        ...store.getState().messages.convos,\r\n        [convoid]: {\r\n          ...store.getState().messages.convos[convoid],\r\n          messages: JSON.parse(messages),\r\n        },\r\n      })\r\n    })\r\n\r\n    socket.on(\r\n      'convo-message-incoming',\r\n      (convoid, todayString, alias, color, timestamp, rawtext) => {\r\n        const convos = store.getState().messages.convos\r\n        setConvos({\r\n          ...convos,\r\n          [convoid]: {\r\n            ...convos[convoid],\r\n            messages: [\r\n              ...(convos[convoid]['messages']\r\n                ? convos[convoid]['messages']\r\n                : []),\r\n              { convoid, todayString, alias, color, timestamp, rawtext },\r\n            ],\r\n          },\r\n        })\r\n      }\r\n    )\r\n\r\n    socket.on('convo-search-response', (messages) => {\r\n      setMessageSearchResults(JSON.parse(messages))\r\n    })\r\n\r\n    //eslint-disable-next-line\r\n  }, [socket, setUser, forceRerender])\r\n\r\n  React.useState(() => {\r\n    window.addEventListener('focus', () => {\r\n      //When socket reloads, all the old messages will just get reappended.\r\n      store.getState().socket.socket.off()\r\n      setSocket(\r\n        io(\r\n          process.env.NODE_ENV === 'production'\r\n            ? process.env.REACT_APP_PROD_URL\r\n            : process.env.REACT_APP_DEV_URL\r\n        )\r\n      )\r\n    })\r\n\r\n    window.addEventListener('paste', (e) => {\r\n      const currentConvoid = store.getState().messages.currentConvoid\r\n\r\n      var items = e.clipboardData.items\r\n      var blob\r\n\r\n      for (var i = 0; i < items.length; i++) {\r\n        if (items[i].kind === 'file') {\r\n          blob = items[i].getAsFile()\r\n          break\r\n        }\r\n      }\r\n\r\n      if (typeof blob === 'undefined') return\r\n      var fileReader = new FileReader()\r\n\r\n      function _generateRandomString() {\r\n        let ret = ''\r\n        for (let i = 0; i < 9; i++) {\r\n          ret += Math.round(Math.random() * 9).toString()\r\n        }\r\n        return ret\r\n      }\r\n      const fileIdentifier = _generateRandomString()\r\n\r\n      blob.meta = fileIdentifier\r\n      fileReader.onload = function (e) {\r\n        //inputMessenger.value = '/image ' + e.target.result;\r\n        socket.emit(\r\n          'convo-message-request',\r\n          store.getState().base.user.token,\r\n          store.getState().base.user.uid,\r\n          currentConvoid,\r\n          '/image ' + fileIdentifier\r\n        )\r\n        store.getState().socket.uploader.submitFiles([blob])\r\n      }\r\n      fileReader.readAsDataURL(blob)\r\n    })\r\n  }, [])\r\n\r\n  return null\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.base.user,\r\n  socket: state.socket.socket,\r\n  convos: state.messages.convos,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  convoListResponse: (convos) => dispatch(convoListResponse(convos)),\r\n  setConvos: (convos) => dispatch(setConvos(convos)),\r\n  setUser: (user) => dispatch(setUser(user)),\r\n  forceRerender: () => dispatch(forceRerender()),\r\n  setMessageSearchResults: (messages) =>\r\n    dispatch(setMessageSearchResults(messages)),\r\n  setSocket: (socket) => dispatch(setSocket(socket)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketIOProvider)\r\n","const theme = {\r\n  palette: {\r\n    primary: {\r\n      main: '#7703fc',\r\n    },\r\n    secondary: {\r\n      main: '#333',\r\n    },\r\n  },\r\n}\r\n\r\nexport default theme\r\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { auth } from './firebase/firebase.utils'\n\nimport AppRoutes from './App.routes'\nimport { BrowserRouter } from 'react-router-dom'\nimport SocketIOProvider from './components/socket.io-provider/socket.io-provider.components'\nimport {\n  ThemeProvider,\n  CssBaseline,\n  useMediaQuery,\n  createMuiTheme,\n} from '@material-ui/core'\n\nimport theme from './theme/theme'\n\nimport { setUser } from './redux/base/base.reducer'\nimport { setConvos } from './redux/messages/messages.reducer'\n\nfunction App({ socket, user, darkModeEnabled, setUser, setConvos }) {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)')\n\n  React.useEffect(() => {\n    //Authentication handling with firebase\n    auth.onAuthStateChanged(async (user) => {\n      if (!user) return setUser(user)\n\n      const token = await user.getIdToken(true)\n\n      user.token = token\n\n      setUser(user)\n    })\n    // eslint-disable-next-line\n  }, [])\n\n  React.useEffect(() => {\n    if (socket && user) socket.emit('login-request', user.token, user.uid)\n  }, [socket, user])\n\n  const superTheme = React.useMemo(\n    () =>\n      createMuiTheme({\n        ...theme,\n        palette: {\n          ...theme.palette,\n          type: prefersDarkMode || darkModeEnabled ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode, darkModeEnabled]\n  )\n\n  return (\n    <BrowserRouter basename={process.env.REACT_APP_ROOT_DIRECTORY}>\n      <ThemeProvider theme={superTheme}>\n        <CssBaseline />\n        <SocketIOProvider />\n        <AppRoutes />\n      </ThemeProvider>\n    </BrowserRouter>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  darkModeEnabled: state.base.darkModeEnabled,\n  user: state.base.user,\n  socket: state.socket.socket,\n  convos: state.messages.convos,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setUser: (user) => dispatch(setUser(user)),\n  setConvos: (convos) => dispatch(setConvos(convos)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { store, persistor } from './redux/store'\n\nimport './index.css'\n\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}